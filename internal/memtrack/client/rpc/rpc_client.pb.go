// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/memtrack/client/rpc/rpc_client.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Gauge struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value                float64  `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c535664b24ae94f, []int{0}
}

func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gauge.Unmarshal(m, b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return xxx_messageInfo_Gauge.Size(m)
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

func (m *Gauge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Gauge) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Gauge) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Gauge) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Counter struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Delta                int64    `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c535664b24ae94f, []int{1}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Counter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Counter) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *Counter) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Gauge)(nil), "rpc.Gauge")
	proto.RegisterType((*Counter)(nil), "rpc.Counter")
}

func init() {
	proto.RegisterFile("internal/memtrack/client/rpc/rpc_client.proto", fileDescriptor_5c535664b24ae94f)
}

var fileDescriptor_5c535664b24ae94f = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xb1, 0x4b, 0x34, 0x31,
	0x10, 0xc5, 0xc9, 0xee, 0xdd, 0xf7, 0x61, 0x50, 0x8b, 0x60, 0xb1, 0x1c, 0x22, 0xc7, 0x55, 0xdb,
	0x98, 0x80, 0x76, 0xb6, 0x16, 0x0a, 0x62, 0xb3, 0x72, 0x5a, 0x4a, 0x2e, 0x19, 0xf7, 0x82, 0xb9,
	0x24, 0xcc, 0xce, 0x2a, 0xfe, 0xf7, 0x92, 0x04, 0x3b, 0x0b, 0x8b, 0x81, 0xf9, 0x3d, 0x1e, 0x8f,
	0xf7, 0xf8, 0xa5, 0x0b, 0x04, 0x18, 0xb4, 0x57, 0x07, 0x38, 0x10, 0x6a, 0xf3, 0xae, 0x8c, 0x77,
	0x10, 0x48, 0x61, 0x32, 0xf9, 0x5e, 0x2b, 0xca, 0x84, 0x91, 0xa2, 0x68, 0x31, 0x99, 0xd5, 0xc5,
	0x18, 0xe3, 0xe8, 0x41, 0x15, 0x69, 0x37, 0xbf, 0xa9, 0x4f, 0xd4, 0x29, 0x01, 0x4e, 0xd5, 0xb4,
	0xd9, 0xf2, 0xe5, 0x9d, 0x9e, 0x47, 0x10, 0xa7, 0xbc, 0x71, 0xb6, 0x63, 0x6b, 0xd6, 0x1f, 0x0d,
	0x8d, 0xb3, 0x42, 0xf0, 0x05, 0x7d, 0x25, 0xe8, 0x9a, 0xa2, 0x94, 0x5f, 0x9c, 0xf1, 0xe5, 0x87,
	0xf6, 0x33, 0x74, 0xed, 0x9a, 0xf5, 0x6c, 0xa8, 0x90, 0x9d, 0x7b, 0x3d, 0xed, 0xbb, 0x45, 0x75,
	0xe6, 0x7f, 0xf3, 0xc2, 0xff, 0xdf, 0xc6, 0x39, 0xd7, 0xfd, 0x6b, 0xb0, 0x05, 0x4f, 0xba, 0x04,
	0xb7, 0x43, 0x85, 0xdf, 0x82, 0xaf, 0x1e, 0xf8, 0xc9, 0x23, 0x10, 0x3a, 0x73, 0xaf, 0x83, 0xf5,
	0x80, 0xe2, 0x86, 0x1f, 0x6f, 0x93, 0xd5, 0x04, 0x65, 0xc6, 0x24, 0xb8, 0xc4, 0x64, 0x64, 0x81,
	0xd5, 0xb9, 0xac, 0xeb, 0xe5, 0xcf, 0x7a, 0xf9, 0x44, 0xe8, 0xc2, 0xf8, 0x9c, 0x7b, 0xf7, 0x6c,
	0xf7, 0xaf, 0xe8, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x06, 0xa0, 0x5e, 0x59, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricHandlerClient is the client API for MetricHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricHandlerClient interface {
	UpdateGauges(ctx context.Context, opts ...grpc.CallOption) (MetricHandler_UpdateGaugesClient, error)
}

type metricHandlerClient struct {
	cc *grpc.ClientConn
}

func NewMetricHandlerClient(cc *grpc.ClientConn) MetricHandlerClient {
	return &metricHandlerClient{cc}
}

func (c *metricHandlerClient) UpdateGauges(ctx context.Context, opts ...grpc.CallOption) (MetricHandler_UpdateGaugesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricHandler_serviceDesc.Streams[0], "/rpc.MetricHandler/UpdateGauges", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricHandlerUpdateGaugesClient{stream}
	return x, nil
}

type MetricHandler_UpdateGaugesClient interface {
	Send(*Gauge) error
	CloseAndRecv() (*wrappers.StringValue, error)
	grpc.ClientStream
}

type metricHandlerUpdateGaugesClient struct {
	grpc.ClientStream
}

func (x *metricHandlerUpdateGaugesClient) Send(m *Gauge) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricHandlerUpdateGaugesClient) CloseAndRecv() (*wrappers.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrappers.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricHandlerServer is the server API for MetricHandler service.
type MetricHandlerServer interface {
	UpdateGauges(MetricHandler_UpdateGaugesServer) error
}

// UnimplementedMetricHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedMetricHandlerServer struct {
}

func (*UnimplementedMetricHandlerServer) UpdateGauges(srv MetricHandler_UpdateGaugesServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateGauges not implemented")
}

func RegisterMetricHandlerServer(s *grpc.Server, srv MetricHandlerServer) {
	s.RegisterService(&_MetricHandler_serviceDesc, srv)
}

func _MetricHandler_UpdateGauges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricHandlerServer).UpdateGauges(&metricHandlerUpdateGaugesServer{stream})
}

type MetricHandler_UpdateGaugesServer interface {
	SendAndClose(*wrappers.StringValue) error
	Recv() (*Gauge, error)
	grpc.ServerStream
}

type metricHandlerUpdateGaugesServer struct {
	grpc.ServerStream
}

func (x *metricHandlerUpdateGaugesServer) SendAndClose(m *wrappers.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricHandlerUpdateGaugesServer) Recv() (*Gauge, error) {
	m := new(Gauge)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MetricHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MetricHandler",
	HandlerType: (*MetricHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateGauges",
			Handler:       _MetricHandler_UpdateGauges_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/memtrack/client/rpc/rpc_client.proto",
}
